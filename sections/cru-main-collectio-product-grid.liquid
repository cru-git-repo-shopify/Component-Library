{% assign all_tags = collections.all.all_tags %}

<div class="shop_filter" style="padding-bottom: 50px;">
  <h2 class="filter-title">Filter by Category:</h2>
  <ul>
    <li><a class="term-item active" href="*">All Products</a></li>
      {% for tag in all_tags %}
          <li><a class="term-item" href=".product_cat-{{ tag | handle }}">{{ tag }}</a></li>
      {% endfor %}
  </ul>
</div>
<div class="filter_mobile">
  <select class="filters_select">
    <option value="*">All Wines</option>
      {% for tag in all_tags %}
        <option value=".product_cat-{{ tag | handle }}">{{ tag }}</option>
      {% endfor %}
  </select>
</div>

{% paginate collections.all.products by section.settings.products_per_page %}
<div class="cru-product-collection">
    {% for product in collections.all.products %}
        <div class="cru-product-item {% for tag in product.tags %}product_cat-{{ tag | handle }} {% endfor %}">
            <a href="{{ product.url }}">
                <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}" class="product-image">
            </a>
            <div class="product-info">
                <p class="product-title"><a href="{{ product.url }}">{{ product.title }}</a></p>
                <p class="product-price">{{ product.price | money }}</p>
                {% if product.available %}
                    <div class="ajax-add-to-cart" data-variant-id="{{ product.variants.first.id }}">
                        <div class="quantity-wrapper">
                            <button type="button" class="qty-btn minus">âˆ’</button>
                            <input
                                type="number"
                                name="quantity"
                                min="1"
                                value="1"
                                class="quantity-input"
                            >
                            <button type="button" class="qty-btn plus">+</button>
                        </div>
                        <div class="add-to-cart-wrapper">
                            <button class="add-to-cart-button">Add to Cart</button>
                            {% comment %} <span class="add-status"></span> {% endcomment %}
                        </div>
                    </div>
                    {% else %}
                    <p class="sold-out">Sold Out</p>
                {% endif %}
            </div>
        </div>
    {% endfor %}
    {% comment %} <div class="pagination">
        <span class="page-info">Page {{ paginate.current_page }} of {{ paginate.pages }}</span>
        <div class="page-links">
            {% if paginate.previous %}
                <a href="{{ paginate.previous.url }}" class="prev">Previous</a>
            {% endif %}
            {% if paginate.next %}
                <a href="{{ paginate.next.url }}" class="next">Next</a>
            {% endif %}
        </div>
    </div> {% endcomment %}
</div>
{% endpaginate %}

<script>
document.addEventListener('DOMContentLoaded', function () {
  document.querySelectorAll('.ajax-add-to-cart').forEach(function (container) {
    const button = container.querySelector('.add-to-cart-button');
    const quantityInput = container.querySelector('.quantity-input');
    const plusBtn = container.querySelector('.qty-btn.plus');
    const minusBtn = container.querySelector('.qty-btn.minus');
    const statusSpan = container.querySelector('.add-status');
    const variantId = container.dataset.variantId;

    // Quantity increment/decrement logic
    plusBtn.addEventListener('click', () => {
      quantityInput.value = parseInt(quantityInput.value || 1) + 1;
    });

    minusBtn.addEventListener('click', () => {
      const current = parseInt(quantityInput.value || 1);
      if (current > 1) quantityInput.value = current - 1;
    });

    // Add to cart AJAX logic
    button.addEventListener('click', function (e) {
      e.preventDefault();
      const quantity = parseInt(quantityInput.value, 10);

      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      })
      .then(res => res.json())
      .then(data => {
        // statusSpan.textContent = "Added!";
        // statusSpan.style.color = "green";
        // setTimeout(() => statusSpan.textContent = '', 2000);
      })
      .catch(err => {
        // statusSpan.textContent = "Error adding to cart";
        // statusSpan.style.color = "red";
      });
    });
  });
});
</script>

{% schema %}
{
  "name": "CRU Product Collection",
  "settings": [
    {
      "type": "number",
      "id": "products_per_page",
      "label": "Products per page",
      "default": 12
    }
  ],
  "presets": [
    {
        "name": "CRU Product Collection",
        "category": "Custom"
    }
  ]
}
{% endschema %}