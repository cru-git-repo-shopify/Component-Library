{% assign all_tags = collections.all.all_tags %}

<div class="shop_filter" style="padding-bottom: 50px;">
  <h2 class="filter-title">Filter by Category:</h2>
  <ul>
    <li><a class="term-item active" href="*">All Products</a></li>
      {% for tag in all_tags %}
          <li><a class="term-item" href=".product_cat-{{ tag | handle }}">{{ tag }}</a></li>
      {% endfor %}
  </ul>
</div>
<div class="filter_mobile">
  <select class="filters_select">
    <option value="*">All Wines</option>
      {% for tag in all_tags %}
        <option value=".product_cat-{{ tag | handle }}">{{ tag }}</option>
      {% endfor %}
  </select>
</div>

{% paginate collections.all.products by section.settings.products_per_page %}
<div class="cru-product-collection">
    {% for product in collections.all.products %}
        <div class="cru-product-item {% for tag in product.tags %}product_cat-{{ tag | handle }} {% endfor %}">
          {% assign points = product.metafields.custom.award_points %}
          {% assign badges = product.metafields.custom.award_badge %}
          {%  assign index = 0 %}
          {% if points != blank or badges != blank %}
            <div class="product_awards">
              {% if points != blank %}
                {% for award in points.value %}
                  <p class="award award_accolade" style="z-index: {{ index }};"><span class="points">{{ award }}</span><span class="type">PTS</span></p>
                  {% assign index = index | plus: 1 %}
                {% endfor %}
              {% endif %}
              {% for badge in badges.value %}
                <img src="{{ badge | img_url: 'large' }}" alt="Award Badge" class="badge award_accolade" style="z-index: {{ index }};">
                {% assign index = index | plus: 1 %}
              {% endfor %}
            </div>
            {% endif %}
          
            <a href="{{ product.url }}">
                <img src="{{ product.featured_image | img_url: 'large' }}" alt="{{ product.title }}" class="product-image ">
            </a>
            <div class="product-info">
                <p class="product-title"><a href="{{ product.url }}">{{ product.title }}</a></p>
                <p class="product-price">{{ product.price | money }}</p>
                {% if product.available %}
                    <div class="ajax-add-to-cart" data-variant-id="{{ product.variants.first.id }}">
                        <div class="quantity-wrapper">
                            <button type="button" class="qty-btn minus">−</button>
                            <input
                                type="number"
                                name="quantity"
                                min="1"
                                value="1"
                                class="quantity-input"
                            >
                            <button type="button" class="qty-btn plus">+</button>
                        </div>
                        <div class="add-to-cart-wrapper">
                            <button class="add-to-cart-button">Add to Cart</button>
                            {% comment %} <span class="add-status"></span> {% endcomment %}
                        </div>
                    </div>
                    {% else %}
                    <p class="sold-out">Sold Out</p>
                {% endif %}
            </div>
        </div>
    {% endfor %}
    {% comment %} <div class="pagination">
        <span class="page-info">Page {{ paginate.current_page }} of {{ paginate.pages }}</span>
        <div class="page-links">
            {% if paginate.previous %}
                <a href="{{ paginate.previous.url }}" class="prev">Previous</a>
            {% endif %}
            {% if paginate.next %}
                <a href="{{ paginate.next.url }}" class="next">Next</a>
            {% endif %}
        </div>
    </div> {% endcomment %}
</div>
{% endpaginate %}

<script>
document.addEventListener('DOMContentLoaded', function () {
  document.querySelectorAll('.ajax-add-to-cart').forEach(function (container) {
    const button = container.querySelector('.add-to-cart-button');
    const quantityInput = container.querySelector('.quantity-input');
    const plusBtn = container.querySelector('.qty-btn.plus');
    const minusBtn = container.querySelector('.qty-btn.minus');
    const statusSpan = container.querySelector('.add-status');
    const variantId = container.dataset.variantId;

    // Quantity increment/decrement logic
    plusBtn.addEventListener('click', () => {
      quantityInput.value = parseInt(quantityInput.value || 1) + 1;
    });

    minusBtn.addEventListener('click', () => {
      const current = parseInt(quantityInput.value || 1);
      if (current > 1) quantityInput.value = current - 1;
    });

    // Add to cart AJAX logic
    button.addEventListener('click', function (e) {
      e.preventDefault();
      const quantity = parseInt(quantityInput.value, 10);

      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      })
      .then(res => res.json())
      .then(data => {
        updateCart();
        openCart(); // Open the cart sidebar
        // statusSpan.textContent = "Added!";
        // statusSpan.style.color = "green";
        // setTimeout(() => statusSpan.textContent = '', 2000);
      })
      .catch(err => {
        // statusSpan.textContent = "Error adding to cart";
        // statusSpan.style.color = "red";
      });
    });
  });

  // Update Cart Function
    function updateCart() {
      fetch('/cart.js')
        .then(res => res.json())
        .then(cart => {
          const itemsContainer = document.getElementById('ajax-cart-items');
          const subtotal = document.getElementById('ajax-cart-subtotal');
          itemsContainer.innerHTML = '';

          if (cart.items.length === 0) {
            itemsContainer.innerHTML = '<p class="text-gray-500">Your cart is empty.</p>';
          } else {
            cart.items.forEach((item, index) => {
              itemsContainer.innerHTML += `
                <div class="flex items-start side-cart-item">
                  <img src="${item.image}" alt="${item.title}" class="w-16 h-16 object-cover border rounded">
                  <div class="cart-item-details">
                    <div class="font-semibold cart-item-title">${item.product_title}</div>
                    <div class="text-sm text-gray-500">Qty: ${item.quantity}</div>
                    <div>${Shopify.formatMoney(item.line_price)}</div>
                  </div>
                  <button 
                    class="text-red-500 hover:text-red-700 text-sm remove-cart-item"
                    data-line="${index + 1}"
                    title="Remove"
                  >✕</button>
                </div>
              `;
            });
          }

          subtotal.textContent = Shopify.formatMoney(cart.total_price);

          // Bind remove buttons
          document.querySelectorAll('.remove-cart-item').forEach(button => {
            button.addEventListener('click', function () {
              const line = this.getAttribute('data-line');

              fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                },
                body: JSON.stringify({
                  line: parseInt(line),
                  quantity: 0
                })
              })
              .then(res => res.json())
              .then(data => {
                updateCart();
              });
            });
          });
        });
    }
    

    function openCart() {
      const cartSidebar = document.getElementById('ajax-cart-sidebar');
      const overlay = document.getElementById('cart-overlay');
      cartSidebar.classList.remove('hidden');
      overlay.classList.remove('hidden');
    }

    if (typeof Shopify === 'undefined') {
      var Shopify = {};
    }
    Shopify.formatMoney = function(cents) {
      return '$' + (cents / 100).toFixed(2);
    }
});

</script>

{% schema %}
{
  "name": "CRU Product Collection",
  "settings": [
    {
      "type": "number",
      "id": "products_per_page",
      "label": "Products per page",
      "default": 12
    }
  ],
  "presets": [
    {
        "name": "CRU Product Collection",
        "category": "Custom"
    }
  ]
}
{% endschema %}